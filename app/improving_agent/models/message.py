from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from improving_agent.models.base_model import Model
from improving_agent.models.auxiliary_graph import AuxiliaryGraph
from improving_agent.models.knowledge_graph import KnowledgeGraph
from improving_agent.models.query_graph import QueryGraph
from improving_agent.models.result import Result
from improving_agent import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results=None, query_graph=None, knowledge_graph=None, auxiliary_graphs=None):  # noqa: E501
        """Message - a model defined in OpenAPI

        :param results: The results of this Message.  # noqa: E501
        :type results: List[Result]
        :param query_graph: The query_graph of this Message.  # noqa: E501
        :type query_graph: QueryGraph
        :param knowledge_graph: The knowledge_graph of this Message.  # noqa: E501
        :type knowledge_graph: KnowledgeGraph
        :param auxiliary_graphs: The auxiliary_graphs of this Message.  # noqa: E501
        :type auxiliary_graphs: Dict[str, AuxiliaryGraph]
        """
        self.openapi_types = {
            'results': List[Result],
            'query_graph': QueryGraph,
            'knowledge_graph': KnowledgeGraph,
            'auxiliary_graphs': Dict[str, AuxiliaryGraph]
        }

        self.attribute_map = {
            'results': 'results',
            'query_graph': 'query_graph',
            'knowledge_graph': 'knowledge_graph',
            'auxiliary_graphs': 'auxiliary_graphs'
        }

        self._results = results
        self._query_graph = query_graph
        self._knowledge_graph = knowledge_graph
        self._auxiliary_graphs = auxiliary_graphs

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self) -> List[Result]:
        """Gets the results of this Message.

        List of all returned Result objects for the query posed. The list SHOULD NOT be assumed to be ordered. The 'score' property, if present, MAY be used to infer result rankings. If Results are not expected (such as for a query Message), this property SHOULD be null or absent. If Results are expected (such as for a response Message) and no Results are available, this property SHOULD be an array with 0 Results in it.  # noqa: E501

        :return: The results of this Message.
        :rtype: List[Result]
        """
        return self._results

    @results.setter
    def results(self, results: List[Result]):
        """Sets the results of this Message.

        List of all returned Result objects for the query posed. The list SHOULD NOT be assumed to be ordered. The 'score' property, if present, MAY be used to infer result rankings. If Results are not expected (such as for a query Message), this property SHOULD be null or absent. If Results are expected (such as for a response Message) and no Results are available, this property SHOULD be an array with 0 Results in it.  # noqa: E501

        :param results: The results of this Message.
        :type results: List[Result]
        """
        if results is not None and len(results) < 0:
            raise ValueError("Invalid value for `results`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._results = results

    @property
    def query_graph(self) -> QueryGraph:
        """Gets the query_graph of this Message.


        :return: The query_graph of this Message.
        :rtype: QueryGraph
        """
        return self._query_graph

    @query_graph.setter
    def query_graph(self, query_graph: QueryGraph):
        """Sets the query_graph of this Message.


        :param query_graph: The query_graph of this Message.
        :type query_graph: QueryGraph
        """

        self._query_graph = query_graph

    @property
    def knowledge_graph(self) -> KnowledgeGraph:
        """Gets the knowledge_graph of this Message.


        :return: The knowledge_graph of this Message.
        :rtype: KnowledgeGraph
        """
        return self._knowledge_graph

    @knowledge_graph.setter
    def knowledge_graph(self, knowledge_graph: KnowledgeGraph):
        """Sets the knowledge_graph of this Message.


        :param knowledge_graph: The knowledge_graph of this Message.
        :type knowledge_graph: KnowledgeGraph
        """

        self._knowledge_graph = knowledge_graph

    @property
    def auxiliary_graphs(self) -> Dict[str, AuxiliaryGraph]:
        """Gets the auxiliary_graphs of this Message.

        Dictionary of AuxiliaryGraph instances that are used by Knowledge Graph Edges and Result Analyses. These are referenced elsewhere by the dictionary key.  # noqa: E501

        :return: The auxiliary_graphs of this Message.
        :rtype: Dict[str, AuxiliaryGraph]
        """
        return self._auxiliary_graphs

    @auxiliary_graphs.setter
    def auxiliary_graphs(self, auxiliary_graphs: Dict[str, AuxiliaryGraph]):
        """Sets the auxiliary_graphs of this Message.

        Dictionary of AuxiliaryGraph instances that are used by Knowledge Graph Edges and Result Analyses. These are referenced elsewhere by the dictionary key.  # noqa: E501

        :param auxiliary_graphs: The auxiliary_graphs of this Message.
        :type auxiliary_graphs: Dict[str, AuxiliaryGraph]
        """

        self._auxiliary_graphs = auxiliary_graphs
