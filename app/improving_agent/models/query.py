from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from improving_agent.models.base_model import Model
from improving_agent.models.log_level import LogLevel
from improving_agent.models.message import Message
from improving_agent.models.schema1 import Schema1
from improving_agent import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        message=None,
        log_level=None,
        workflow=None,
        submitter=None,
        bypass_cache=False,
        max_results=200,
        query_kps=False,
        psev_context=None
    ):  # noqa: E501
        """Query - a model defined in OpenAPI

        :param message: The message of this Query.  # noqa: E501
        :type message: Message
        :param log_level: The log_level of this Query.  # noqa: E501
        :type log_level: LogLevel
        :param workflow: The workflow of this Query.  # noqa: E501
        :type workflow: Schema1
        :param submitter: The submitter of this Query.  # noqa: E501
        :type submitter: str
        :param bypass_cache: The bypass_cache of this Query.  # noqa: E501
        :type bypass_cache: bool
        :param max_results: The max_results of this Query.  # noqa: E501
        :type max_results: int
        :param query_kps: The query_kps of this Query.  # noqa: E501
        :type query_kps: bool
        :param psev_context: The psev_context of this Query.  # noqa: E501
        :type psev_context: str
        """
        self.openapi_types = {
            'message': Message,
            'log_level': LogLevel,
            'workflow': List[Schema1],
            'submitter': str,
            'bypass_cache': bool,
            'max_results': int,
            'query_kps': bool,
            'psev_context': str,
        }

        self.attribute_map = {
            'message': 'message',
            'log_level': 'log_level',
            'workflow': 'workflow',
            'submitter': 'submitter',
            'bypass_cache': 'bypass_cache',
            'max_results': 'max_results',
            'query_kps': 'query_kps',
            'psev_context': 'psev_context',
        }

        self._message = message
        self._log_level = log_level
        self._workflow = workflow
        self._submitter = submitter
        self._bypass_cache = bypass_cache
        self._max_results = max_results
        self._query_kps = query_kps
        self._psev_context = psev_context

    @classmethod
    def from_dict(cls, dikt) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query of this Query.  # noqa: E501
        :rtype: Query
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> Message:
        """Gets the message of this Query.


        :return: The message of this Query.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message: Message):
        """Sets the message of this Query.


        :param message: The message of this Query.
        :type message: Message
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def log_level(self) -> LogLevel:
        """Gets the log_level of this Query.


        :return: The log_level of this Query.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level: LogLevel):
        """Sets the log_level of this Query.


        :param log_level: The log_level of this Query.
        :type log_level: LogLevel
        """

        self._log_level = log_level

    @property
    def workflow(self) -> list[Schema1]:
        """Gets the workflow of this Query.


        :return: The workflow of this Query.
        :rtype: list[Schema1]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow: list[Schema1]):
        """Sets the workflow of this Query.


        :param workflow: The workflow of this Query.
        :type workflow: list[Schema1]
        """

        self._workflow = workflow

    @property
    def submitter(self) -> str:
        """Gets the submitter of this Query.

        Any string for self-identifying the submitter of a query. The purpose of this optional field is to aid in the tracking of the source of queries for development and issue resolution.  # noqa: E501

        :return: The submitter of this Query.
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter: str):
        """Sets the submitter of this Query.

        Any string for self-identifying the submitter of a query. The purpose of this optional field is to aid in the tracking of the source of queries for development and issue resolution.  # noqa: E501

        :param submitter: The submitter of this Query.
        :type submitter: str
        """

        self._submitter = submitter

    @property
    def bypass_cache(self) -> bool:
        """Gets the bypass_cache of this Query.

        Set to true in order to request that the agent obtain fresh information from its sources in all cases where it has a viable choice between requesting fresh information in real time and using cached information.  # noqa: E501

        :return: The bypass_cache of this Query.
        :rtype: bool
        """
        return self._bypass_cache

    @bypass_cache.setter
    def bypass_cache(self, bypass_cache: bool):
        """Sets the bypass_cache of this Query.

        Set to true in order to request that the agent obtain fresh information from its sources in all cases where it has a viable choice between requesting fresh information in real time and using cached information.  # noqa: E501

        :param bypass_cache: The bypass_cache of this Query.
        :type bypass_cache: bool
        """

        self._bypass_cache = bypass_cache

    @property
    def max_results(self):
        """Gets the max_results of this Query.

        The maximum number of results to return. Currently, this is hardcoded to 200 in the imProving Agent internals, but you can request fewer results for testing. The maximum number internally will certainly increase going forward.  # noqa: E501

        :return: The max_results of this Query.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this Query.

        The maximum number of results to return. Currently, this is hardcoded to 200 in the imProving Agent internals, but you can request fewer results for testing. The maximum number internally will certainly increase going forward.  # noqa: E501

        :param max_results: The max_results of this Query.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def query_kps(self):
        """Gets the query_kps of this Query.

        A boolean value as to whether or not to attempt to query Translator Knowledge Providers for additional data that is not found in SPOKE. Note that choosing true may increase the processing time for your request significantly.  # noqa: E501

        :return: The query_kps of this Query.
        :rtype: bool
        """
        return self._query_kps

    @query_kps.setter
    def query_kps(self, query_kps):
        """Sets the query_kps of this Query.

        A boolean value as to whether or not to attempt to query Translator Knowledge Providers for additional data that is not found in SPOKE. Note that choosing true may increase the processing time for your request significantly.  # noqa: E501

        :param query_kps: The query_kps of this Query.
        :type query_kps: bool
        """

        self._query_kps = query_kps

    @property
    def psev_context(self):
        """Gets the psev_context of this Query.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :return: The psev_context of this Query.
        :rtype: str
        """
        return self._psev_context

    @psev_context.setter
    def psev_context(self, psev_context):
        """Sets the psev_context of this Query.

        A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.  # noqa: E501

        :param psev_context: The psev_context of this Query.
        :type psev_context: str
        """

        self._psev_context = psev_context